"""
4. Задача консенсуса DNA ридов

При чтении DNA последовательностей могут возникать единичные ошибки, выражающиеся в неверной букве в строке.
Для решения данной проблемы требуемое место читается несколько раз, после чего строится консенсус-строка,
в которой на каждом месте будет стоять тот символ, что чаще всего встречался в этом месте суммарно во всех чтениях.
Т.е. для строк:
ATTA
ACTA
AGCA
ACAA
консенсус-строка будет ACTA
(в первой ячейке чаще всего встречалась A, во второй – C, в третьей – Т, в четвертой – снова А).
Для входного списка из N строк одинаковой длины построить консенсус-строку.
В случае одинаковой позиционной частоты, то выбрать ту, что меньше лексиграфически.
"""


def dna(list_: list[str]) -> str:
    """
    Функция, которая исправляет ошибку при чтении DNA последовательностей

    :param list_: Список чтений нескольких раз
    :return: Консенсус-строка для чтений DNA последовательностей

    >>> dna(["ATTA", "ACTA", "AGCA", "ACAA"])
    'ACTA'
    >>> dna(["ATTAB", "ACTAB", "AGCAA", "ACAAA"])
    'ACTAA'
    """
    str_ = ""
    for j in range(len(list_[0])):
        dict_ = {}
        for i in range(len(list_)):  # Пробегаемся по слову для каждой позиции буквы
            if list_[i][j] in dict_:
                dict_[list_[i][j]] += 1
            else:
                dict_[list_[i][j]] = 1  # Заполняем словарь кол-вом повторяющихся букв

        max_count = max(dict_.values())  # Ищем самое большое кол-во
        most_frequent = [k for k, v in dict_.items() if v == max_count]  # Отбираем буквы с самым большим кол-вом
        str_ += min(most_frequent)  # Выбираем лексекографически наименьшую букву и добавляем в итоговое слово
    return str_


if __name__ == "__main__":
    import doctest
    doctest.testmod()
